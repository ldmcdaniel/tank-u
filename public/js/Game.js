'use strict';

var explosions, money, moneyText, score, scoreText, restartGame, waveNumber;
var nextFire = [];
var wave = 1;
var enemiesKilled = 0;
var pausedGame = false;
for (var i = 0; i < 10; i++) {
  nextFire[i] = 0;
}
PhaserGame.Game = {
  create: function create() {
    this.gameWorld();
  },
  gameWorld: function gameWorld() {
    this.setScale();
    this.makeElements();
    this.createEnemyPlot(this.enemyWave);
    this.scoreAndStats();
    this.createGameMusic();
  },
  makeElements: function makeElements() {
    var map = this.add.tilemap('map');
    this.createMap(map);
    this.createBullets();
    this.createTurrets();
    this.createEnemies();
    map.createLayer('Tree Tops and Bridges').scale.set(this.scale);
  },
  setScale: function setScale() {
    this.scale = 1;
    if (window.innerWidth < 1024 || window.innerHeight < 768) {
      if (window.innerWidth / 1024 > window.innerHeight / 768) {
        this.scale = window.innerHeight / 768;
      } else {
        this.scale = window.innerWidth / 1024;
      }
    }
  },
  createMap: function createMap(map) {
    var _this = this;

    // First param :name of tileset from tiled; second: game.load.image
    map.addTilesetImage('terrain_atlas', 'terrain');
    map.addTilesetImage('turrets32', 'turrets');
    var layers = ['Road', 'Grass', 'Tree bases'];
    layers.forEach(function (layer) {
      return map.createLayer(layer).scale.set(_this.scale);
    });
    this.bmd = this.add.bitmapData(game.width * this.scale, game.height * this.scale);
    this.bmd.addToWorld();
  },
  createBullets: function createBullets() {
    this.bullets = game.add.group();
    var bullets = this.bullets;
    bullets.scale.set(this.scale);
    bullets.enableBody = true;
    bullets.physicsBodyType = Phaser.Physics.ARCADE;
    bullets.createMultiple(2000, 'bullet1');
    bullets.setAll('checkWorldBounds', true);
    bullets.setAll('outOfBoundsKill', true);
  },
  createEnemies: function createEnemies() {
    this.enemies = game.add.group();
    var enemies = this.enemies;
    enemies.scale.set(this.scale);
    enemies.enableBody = true;
    enemies.physicsBodyType = Phaser.Physics.ARCADE;
    // this.enemyWave = ['tank1', 'tank2', 'tank3', 'tank4', 'tank5', 'tank6', 'tank7', 'tank8', 'tank9', 'tank10', 'tank11'];
    var waveNumber = wave - 1;
    console.log(waveNumber);
    this.enemyWave = this.wavesOfWaves()[waveNumber];
    var enemyWave = this.enemyWave;
    enemyWave.forEach(function (enemyString, i) {
      enemyWave[i] = enemies.create(-16, 116, enemyString);
      enemyWave[i].anchor.set(0.5);
      enemyWave[i].animations.add('explosion', false);
      enemyWave[i].health = parseInt(enemyWave[i].key.split('k')[1]);
    });
  },
  wavesOfWaves: function wavesOfWaves() {
    return [['tank8', 'tank10', 'tank8', 'tank11', 'tank10', 'tank8', 'tank23', 'tank10', 'tank8', 'tank10'], ['tank11', 'tank23', 'tank11', 'tank24', 'tank23', 'tank11', 'tank25', 'tank23', 'tank11', 'tank23'], ['tank24', 'tank25', 'tank24', 'tank30', 'tank25', 'tank24', 'tank31', 'tank25', 'tank24', 'tank25']];
  },
  createTurrets: function createTurrets() {
    this.guns = game.add.group();
    var guns = this.guns;
    guns.scale.set(this.scale);
    this.turretPosition = ['turret1', 'turret1', 'turret1', 'turret1', 'turret1', 'turret1', 'turret1', 'turret1', 'turret1', 'turret1'];
    var turretPosition = this.turretPosition;
    this.coinPosition = ['coin', 'coin', 'coin', 'coin', 'coin', 'coin', 'coin', 'coin', 'coin', 'coin'];
    var coinPosition = this.coinPosition;
    this.turretSpots = {
      'x': [352, 800, 256, 448, 96, 320, 128, 354, 832, 864],
      'y': [32, 96, 256, 256, 320, 480, 640, 704, 384, 544]
    };
    var turretSpots = this.turretSpots;
    var createTurret = this.createTurret;
    var scale = this.scale;
    turretPosition.forEach(function (turret, i) {
      turretPosition[i] = guns.create(turretSpots.x[i], turretSpots.y[i], turretPosition[i]);
      turretPosition[i].anchor.set(0.5);
      coinPosition[i] = game.add.button(turretSpots.x[i] * scale, turretSpots.y[i] * scale, coinPosition[i], createTurret);
      coinPosition[i].anchor.set(0.5);
    });
    explosions = game.add.group();
    explosions.scale.set(this.scale);
    explosions.createMultiple(100, 'explosion');
  },
  createScore: function createScore() {
    score = 0;
    scoreText = game.add.text(820 * this.scale, 10 * this.scale, 'Score: ' + score);
  },
  createMoney: function createMoney() {
    money = 40;
    moneyText = game.add.text(412 * this.scale, 10 * this.scale, "$ " + money);
  },
  scoreAndStats: function scoreAndStats() {
    this.createScore();
    this.createMoney();
    waveNumber = game.add.text(30, 10, 'Wave ' + wave);
  },
  createGameMusic: function createGameMusic() {
    this.backgroundMusic = game.add.audio('backgroundMusic', true);
    this.backgroundMusic.play('', 0, 0.2, true);
  },
  createEnemyPlot: function createEnemyPlot(enemies) {
    this.path = [];
    var ix = 0;
    var x = 1 / (game.width + (enemies.length - 1) * 100);
    this.points = {
      'x': [-466, -416, -366, -316, -266, -216, -156, -56, -16, 100, 200, 300, 400, 500, 600, 700, 740, 675, 600, 500, 400, 300, 205, 180, 190, 290, 390, 490, 590, 690, 790, 850, 860, 860, 860, 860, 860, 860, 860, 860, 860, 860],
      'y': [130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 145, 160, 180, 250, 310, 340, 350, 350, 365, 400, 475, 550, 590, 610, 623, 630, 638, 650, 720, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250]
    };
    this.pi = 0;
    for (var i = 0; i <= 1; i += x) {
      var px = this.math.catmullRomInterpolation(this.points.x, i);
      var py = this.math.catmullRomInterpolation(this.points.y, i);
      //This draws the path onto the screen to edit the path
      // this.bmd.rect(px, py, 1, 1, 'rgba(255, 255, 255, 1)');
      var node = { x: px, y: py, angle: 0 };
      if (ix > 0) {
        node.angle = this.math.angleBetweenPoints(this.path[ix - 1], node);
      }
      this.path.push(node);
      ix++;
    }
    // This draws rectangles onto the path where the nodes are located
    // for (var p = 0; p < this.points.x.length; p++) {
    //   this.bmd.rect(this.points.x[p]-3, this.points.y[p]-3, 6, 6, 'rgba(255, 0, 0, 1)');
    // }
  },
  update: function update() {
    if (wave < 3) {
      this.sendEnemyWave();
    } else {
      this.startTankMission(this.enemyWave);
      if (enemiesKilled >= this.enemyWave.length * wave) {
        enemiesKilled = 0;
        game.state.start('GameWon');
      }
    }
  },
  sendEnemyWave: function sendEnemyWave() {
    this.startTankMission(this.enemyWave);
    if (enemiesKilled >= this.enemyWave.length * wave) {
      // map.createLayer('Tree Tops and Bridges').scale.set(this.scale);
      PhaserGame.Game.createEnemyPlot(PhaserGame.Game.enemyWave);
      wave++;
      waveNumber.setText('Wave ' + wave);
      PhaserGame.Game.createEnemies();
    }
  },
  startTankMission: function startTankMission(enemies) {
    for (var i = 0; i < enemies.length; i++) {
      try {
        var offset = this.path[this.pi + ((enemies.length - 1) * 40 - i * 40)];
        enemies[i].x = offset.x;
        enemies[i].y = offset.y;
        enemies[i].rotation = offset.angle;
      } catch (e) {
        game.state.start('GameLost');
      }
    }
    this.pi++;
    var turretPosition = this.turretPosition;
    for (var i = 0; i < enemies.length; i++) {
      for (var j = 0; j < turretPosition.length; j++) {
        if (this.physics.arcade.distanceToXY(enemies[i], turretPosition[j].x, turretPosition[j].y) < 200 && enemies[i].alive === true) {
          turretPosition[j].rotation = game.physics.arcade.angleBetween(turretPosition[j], enemies[i]);
        }
      }
    }
    this.updateTurretAim();
    game.physics.arcade.overlap(this.bullets, this.enemies, this.collisionHandler);
  },
  updateTurretAim: function updateTurretAim() {
    for (var y = 0; y < 10; y++) {
      if (this.coinPosition[y].alive === false) {
        this.aim(y);
      }
    }
  },
  updateMoney: function updateMoney(amount) {
    money -= amount;
    moneyText.setText('$ ' + money);
  },
  createTurret: function createTurret(coin) {
    if (money - 8 >= 0) {
      coin.kill();
      PhaserGame.Game.updateMoney(8);
      game.add.audio('cashRegister').play();
    }
  },
  updateScore: function updateScore(points) {
    score += points;
    scoreText.setText('Score: ' + score);
  },
  collisionHandler: function collisionHandler(bullet, enemy) {
    bullet.kill();
    enemy.health -= 1;
    PhaserGame.Game.updateScore(1);
    if (enemy.health <= 0) {
      game.add.audio('explosion').play('', 0, 0.4);
      enemy.kill();
      enemiesKilled += 1;
      PhaserGame.Game.updateScore(5);
      PhaserGame.Game.updateMoney(-5);
      var explosion = explosions.getFirstExists(false);
      explosion.reset(enemy.body.x - 70, enemy.body.y - 70);
      explosion.animations.add('explosion');
      explosion.animations.play('explosion', null, false, true);
    }
  },
  aim: function aim(x) {
    var turretPosition = this.turretPosition[x];
    if (game.time.now > nextFire[x] && this.bullets.countDead() > 0) {
      var bullet = this.bullets.getFirstDead();
      var fireRate = 300;
      nextFire[x] = game.time.now + fireRate;
      bullet.anchor.set(0.5);
      bullet.reset(turretPosition.x, turretPosition.y);
      // Try decrimenting the function to have it aim at the first turret
      for (var i = 0; i < this.enemyWave.length; i++) {
        var enemy = this.enemyWave[i];
        if (this.physics.arcade.distanceToXY(enemy, turretPosition.x, turretPosition.y) < 200 && enemy.alive === true && enemy.x > 0 && enemy.y < 768) {
          bullet.rotation = game.physics.arcade.angleBetween(turretPosition, enemy);
          game.physics.arcade.moveToObject(bullet, enemy, 300);
          game.add.audio('shot').play('', 0, 0.05);
        }
      }
    }
  }
};

game.state.add('Game', PhaserGame.Game);
//# sourceMappingURL=data:application/json;base64,
